name: Build app & run testsuite
permissions:
  contents: read
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 11 * * 1' # run "At 11:00 on Monday"

jobs:
  all-tests:
    name: Run testsuite
    runs-on: ubuntu-latest
    services:
      # label used to access the service container
      mongodb:
        # dockerhub image
        image: mongo
        # provide the login and db deets for mongo
        env:
          MONGO_INITDB_ROOT_USERNAME: lister_test
          MONGO_INITDB_ROOT_PASSWORD: "${{ secrets.TESTDB_PASSWORD }}"
          MONGO_INITDB_DATABASE: lister_test
        ports:
          # maps tcp port 27017 on service container to the host
          - 27017:27017
        # set health checks to wait until mongo has started
        options: >-
          --health-cmd "echo 'db.runCommand("ping").ok' | mongosh --quiet"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:

      - name: Install mongosh
        run: |
          sudo apt-get update
          wget -qO- https://www.mongodb.org/static/pgp/server-7.0.asc | sudo tee /etc/apt/trusted.gpg.d/server-7.0.asc
          echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/7.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-7.0.list
          sudo apt-get update && sudo apt-get install -y mongodb-mongosh  

      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Install dependencies
        run: go mod tidy

      # have to create an .env file to be able to run unit tests
      - name: Create .env file from github secrets
        run: |
          echo "${{ secrets.ENV_FILE }}" > .env
          
      - name: Override MONGO_URI for CI
        run: |
          echo "MONGO_URI=mongodb://lister_test:${{ secrets.TESTDB_PASSWORD }}@mongodb:27017/lister_test?authSource=admin" >> .env

      # run all tests
      - name: Run go test and generate test coverage file
        run: |
          set -e
          set -o pipefail
          touch poptape_lister.log
          go test -v ./... -cover -coverprofile=./cover.out | tee test.out
        shell: bash

      # and check test coverage percentage
      - name: Check test coverage is above threshold
        env:
          TESTCOVERAGE_THRESHOLD: 45
        run: |
          echo "Checking test coverage is above threshold..."
          echo "Threshold             : $TESTCOVERAGE_THRESHOLD %"
          totalCoverage=`go tool cover -func=cover.out | grep total | grep -Eo '[0-9]+\.[0-9]+'`
          echo "Current test coverage : $totalCoverage %"
          echo "-----------------------------------------------------------"
          if awk "BEGIN {exit !($totalCoverage >= $TESTCOVERAGE_THRESHOLD)}";
          then
              echo "Coverage passed threshold OK"
          else
              echo "Current test coverage is below threshold. Please add more unit tests or adjust threshold to a lower value."
              echo "Failed"
              exit 1
          fi
          echo "-----------------------------------------------------------"
      - name: List missed coverage lines
        shell: bash
        run: |
          go test -coverprofile=coverage.out ./...
          echo "Missed lines:"
          awk '
            BEGIN { OFS=" " }
            /^mode:/ { next }
            {
              for (i = 1; i <= NF; i += 4) {
                block = $i
                stmts = $(i+1)
                count = $(i+2)
                if (count == "0") {
                  split(block, parts, ":")
                  file = parts[1]
                  rest = parts[2]
                  split(rest, lines, ",")
                  start = lines[1]
                  end = lines[2]
                  split(start, start_parts, ".")
                  split(end, end_parts, ".")
                  start_line = start_parts[1]
                  end_line = end_parts[1]
                  if (start_line == end_line) {
                    print file ":" start_line
                  } else {
                    print file ":" start_line "-" end_line
                  }
                }
              }
            }
          ' coverage.out

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage.out